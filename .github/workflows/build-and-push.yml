name: Build & Push Docker Image

on:
  workflow_dispatch:
  push:
    tags:
      - '*'

jobs:
  send-start-message:
    name: 📢 Send Telegram message
    runs-on: ubuntu-latest
    steps:
      - name: 🔧 Checkout source code
        uses: actions/checkout@v4

      - name: 📬 Send Telegram message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            🏹 Начало деплоя пакета ${{ github.REPOSITORY }}
            Коммит: ${{ github.event.head_commit.message }}
            Автор: ${{ github.event.head_commit.author.name }}
            Время: ${{ github.event.head_commit.timestamp }}

  build-docker-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: 🔧 Checkout source code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: 🔧 Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔧 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🔧 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📤 Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64, linux/arm64
          push: true
          tags: |
            localzet/aura-frontend:latest
            localzet/aura-frontend:${{github.ref_name}}
            ghcr.io/localzet/aura-frontend:latest
            ghcr.io/localzet/aura-frontend:${{github.ref_name}}

  create-release:
    needs: [ build-docker-image ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
      - name: 🔧 Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: 🔧 NewTag
        id: tag
        uses: JinoArch/get-latest-tag@latest

      - name: Generate build-info.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-8)
          BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          BRANCH="main"
          FULL_SHA="${{ github.sha }}"
          TAG="null"
          
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          TAG="${{ github.ref_name }}"
          fi
          
          COMMIT_URL="https://github.com/${{ github.repository }}/commit/$SHORT_SHA"
          
          cat <<EOF > build.info.json
          {
          "buildTime": "$BUILD_TIME",
          "commitFull": "$FULL_SHA",
          "commit": "$SHORT_SHA",
          "tag": $( [ "$TAG" = "null" ] && echo null || echo "\"$TAG\"" ),
          "branch": "$BRANCH",
          "commitUrl": "$COMMIT_URL"
          }
          EOF

      - name: Generate changelog
        id: changelog
        run: |
          CHANGELOG=$(npx changelogen --from=${{ steps.tag.outputs.previousTag }} --to=${{ steps.tag.outputs.latestTag }} | sed '/^\[log\]/d')
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Install dependencies and build
        run: |
          npm install
          npm run start:build

      - name: Create ZIP archive of /dist
        run: |
          zip -r aura-frontend.zip ./dist

      - name: 🔧 Create Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: aura-frontend.zip
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          generate_release_notes: true
          append_body: true
          make_latest: true
          draft: false
          prerelease: false
          body: |
            # 🌊 Aura Frontend v${{ github.ref_name }}
            
            📝 Compare changes: ${{ env.CHANGELOG }}
            
            ### 📦 Artifacts
            - aura-frontend.zip - archive with built frontend
            
            ### 🔍 Details
            - Commit: ${{ github.sha }}
            - Branch: ${{ github.ref_name }}
            - Build time: ${{ github.event.head_commit.timestamp }}

  send-success-message:
    name: 📢 Send Telegram message
    needs: [ build-docker-image, create-release ]
    runs-on: ubuntu-latest
    steps:
      - name: 🔧 Checkout source code
        uses: actions/checkout@v4

      - name: 📬 Send Telegram message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ✅ Пакет ${{ github.REPOSITORY }} успешно опубликован
            Тег: *${{ github.sha }}*
            Коммит: ${{ github.event.head_commit.message }}
            Автор: ${{ github.event.head_commit.author.name }}
            Время: ${{ github.event.head_commit.timestamp }}

  send-error-message:
    name: 📢 Send Telegram message
    runs-on: ubuntu-latest
    needs: [ build-docker-image, create-release ]
    if: failure()
    steps:
      - name: 🔧 Checkout source code
        uses: actions/checkout@v4

      - name: 🚨 Send error notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ❌ Ошибка в ${{ github.REPOSITORY }}: проблемы в сборке
